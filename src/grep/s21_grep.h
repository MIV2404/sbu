#include <getopt.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ERROR_01 "s21_grep: %s: No such file or directory\n"

typedef struct {
  int e;
  int i;
  int v;
  int c;
  int l;
  int n;
  int h;
  int s;
  int f;
  int o;
  int countFiles;
  int numberLine;
  int countMatches;
} options;

/**
 * @brief Основная функция обработки аргументов командной строки.
 *
 * Проверяет, что передан хотя бы один аргумент командной строки.
 * Инициализирует временную переменную и структуру конфигурации.
 * Обрабатывает опции командной строки и применяет grep к каждому файлу.
 * Освобождает выделенную память для временной переменной.
 *
 * @param argc Количество аргументов командной строки.
 * @param argv Массив строк с аргументами командной строки.
 */
void s21_grep_programm(int argc, char *argv[]);

/**
 * @brief Сканирование флагов командной строки и обработка опций:
 *
 * Обрабатывает опции командной строки и устанавливает соответствующие флаги
 * в структуре config. Обновляет шаблон, если указаны опции '-e' или '-f'.
 * Устанавливает шаблон по умолчанию, если не указаны '-e' или '-f'.
 *
 * @param argc Количество аргументов командной строки.
 * @param argv Массив строк с аргументами командной строки.
 * @param config Указатель на структуру, содержащую флаги конфигурации.
 * @param template Указатель на массив строк, содержащий шаблоны.
 * @return Возвращает индекс следующего аргумента для обработки.
 */
int scan_options(int argc, char *argv[], options *config, char *template[]);

/**
 * @brief Вывод основных данных, включая совпадающие строки:
 *
 * Создает регулярное выражение из шаблона с учетом флагов. Если совпадение
 * найдено, увеличивает счетчик совпадений и выводит результат. Если не
 * установлены флаги -c или -l, выводит совпадающую строку. Если файлов больше
 * одного и флаг -h не установлен, выводит имя файла. Если установлен флаг -n,
 * выводит номер строки. Если флаг -o не установлен, выводит всю строку, иначе
 * выводит только совпадение. Выводит только совпадающую часть. Освобождает
 * регулярное выражение.
 *
 * @param str Входная строка для анализа.
 * @param options Указатель на структуру с флагами конфигурации.
 * @param tmpl Шаблон для поиска.
 * @param name Имя файла.
 */
void print_main_data(char *str, options *options, char *tmpl, char *name);

/**
 * @brief Установка шаблона на основе содержимого файла, указанного опцией '-f':
 *
 * Открывает файл, указанный опцией -f, для чтения. Проходит по содержимому
 * файла, выделяет память для строки, считывает строку из файла, увеличивает
 * размер строки, если необходимо. Если нет установленных флагов -e или -f,
 * устанавливает -f и создает шаблон. Освобождает память, выделенную для строки.
 * Если файл не удалось открыть и флаг -s не установлен, выводит ошибку.
 *
 * @param config Указатель на структуру с флагами конфигурации.
 * @param template Указатель на массив строк, содержащий шаблоны.
 * @param optarg Аргумент опции -f, содержащий имя файла.
 */
void set_config_flag_f(options *config, char *template[], char *optarg);

/**
 * @brief Установка флага -e, обрабатывающая аргумент опции -e:
 *
 * Если нет установленных флагов -e или -f, устанавливает -e и создает шаблон.
 * В противном случае добавляет шаблон к существующему.
 *
 * @param config Указатель на структуру с флагами конфигурации.
 * @param template Указатель на массив строк, содержащий шаблоны.
 * @param optarg Аргумент опции -e, содержащий шаблон.
 */
void set_config_flag_e(options *config, char *template[], char *optarg);

/**
 * @brief Вывод совпадающей части строки, используя опцию -o:
 *
 * Проходит по строке и выводит каждое совпадение. Выделяет память для
 * подстроки совпадения, ищет конец и начало совпадения, переносит совпадение
 * в начало строки и выводит. Освобождает память, выделенную для подстроки, и
 * удаляет совпадение из строки.
 *
 * @param my_regex Регулярное выражение для поиска.
 * @param str Входная строка для анализа.
 * @param config Структура с флагами конфигурации.
 */
void print_config_o(regex_t my_regex, char *str, options config);

/**
 * @brief Открытие файла, применение функции grep к его содержимому и вывод:
 *
 * Открывает файл по указанному пути для чтения. Проверяет, удалось ли открыть
 * файл. Проходит по содержимому файла, выделяет память для строки и увеличивает
 * номер текущей строки. Считывает строку из файла, увеличивает размер строки,
 * если необходимо. Выводит основные данные. Освобождает память, выделенную
 * для строки. Выводит дополнительные данные и закрывает файл. Если файл не
 * удалось открыть и флаг -s не установлен, выводит ошибку.
 *
 * @param name Имя файла.
 * @param config Структура с флагами конфигурации.
 * @param tmpl Шаблон для поиска.
 */
void s21_grep(char *name, options config, char *tmpl);

/**
 * @brief Функция вывода вспомогательных данных в зависимости от конфигурации:
 *
 * Если установлены флаги l, c и файлов больше одного, выводим имя файла и "1"
 * Если файлов больше одного, выводим имя файла и количество совпадений
 * Если установлен флаг l и есть совпадения, выводим имя файла
 *
 * @param options config
 * @param char *path
 */
void printf_aux_data(options config, char *path);

/**
 * @brief Вывод вспомогательных данных в зависимости от конфигурации:
 *
 * Если установлены флаги l, c и файлов больше одного, выводит имя файла и "1".
 * Если файлов больше одного, выводит имя файла и количество совпадений.
 * Если установлен флаг l и есть совпадения, выводит имя файла.
 *
 * @param config Структура с флагами конфигурации.
 * @param path Путь к файлу.
 */
void *increase_length_str(void *str, int size);

/**
 * @brief Создание шаблона из строки:
 *
 * Выделяет память для шаблона и копирует строку.
 *
 * @param str Указатель на строку-шаблон.
 * @param optarg Строка для создания шаблона.
 * @return Возвращает 1, чтобы указать успешное создание шаблона.
 */
int create_template(char *str[], char *optarg);

/**
 * @brief Настройка конфигурации, обрабатывающая конфликтующие опции:
 *
 * Если установлен флаг -o и одновременно установлен хотя бы один из флагов
 * -l, -v, -c, сбрасывает -o. Устанавливает количество файлов в конфигурации.
 * Если установлен флаг l и есть совпадения, выводит имя файла.
 *
 * @param config Указатель на структуру с флагами конфигурации.
 * @param argc Количество аргументов командной строки.
 */
void setup_config(options *config, int argc);

/**
 * @brief Добавление подстроки к существующему шаблону:
 *
 * Увеличивает размер шаблона и конкатенирует с новой подстрокой.
 *
 * @param str Указатель на строку-шаблон.
 * @param optarg Строка для добавления к шаблону.
 * @return Возвращает 1, чтобы указать успешное добавление подстроки к шаблону.
 */
void add_template(char *str[], char *optarg);
